import { Game } from '@/interfaces/game/game';
import { Socket, Server as SocketServer } from 'socket.io';
import SocketController from './socket.controller';

/*
  |--------------------------------------------------------------------------
  | GameController
  |--------------------------------------------------------------------------
  |
  | The purpose of this controller is to provide methods to control the game flow
  | from the server.
  |
  |
*/
export default class GameController {
  private server: SocketServer;
  private socketController: SocketController;
  private maxPlayer = 6;
  private game: Game = { id: null, players: [], status: 'unavailable' };

  constructor(server: SocketServer) {
    this.server = server;
    this.socketController = new SocketController();
  }

  public init() {
    this.server.on('connection', socket => {
      this.socketController.connection(socket);

      /**
       * Create the room if 'create:room' event is sent by the client
       */
      socket.on('create:room', ({ name }) => this.create(socket, name));

      /**
       * Join the room if 'join:room' event is sent by the client
       */
      socket.on('join:room', async ({ name, room }) => await this.join(socket, room, name));

      /**
       * Start the game if 'start:game' event is sent by the client
       */
      socket.on('start:game', () => this.start(socket));
    });
  }

  /*
    |--------------------------------------------------------------------------
    | private create method
    |--------------------------------------------------------------------------
    |
    | The purpose of this method is to add the current player to the list of
    | players (on his own room) and return the room_id (socket.id) to the client.
    |
    | On success we create the room, push the player to the list of players
    | and emit a success event.
    | On fail we return an error message saying that the name does not exist.
    |
  */
  private create(socket: Socket, name: string) {
    if (!name) {
      socket.emit('create:room:error', { message: 'name property does not exist.' });
      return;
    }

    this.game.id = socket.id;
    this.game.status = 'available';
    this.game.players.push({ id: socket.id, name, role: 'owner', lifePoint: 3 });

    socket.emit('create:room:success', this.game.players, socket.id);
  }

  /*
    |--------------------------------------------------------------------------
    | private async join method
    |--------------------------------------------------------------------------
    |
    | The purpose of this method is to, first verify if the room_id passed in
    | param exist on the server. This room_id come from the client page url
    | previously generated by an another player thanks to the create method.
    |
    | On success we join the room, push the player to the list of players
    | and emit a success event.
    | On fail we return an error message saying that the room or name does not exist.
    |
  */
  private async join(socket: Socket, room: string, name: string) {
    if (this.game.status !== 'available') {
      socket.emit('join:room:error', { message: 'The room is not available.' });
      return;
    }

    if (!this.server.sockets.adapter.rooms.has(room) || !name) {
      socket.emit('join:room:error', { message: `${!name ? 'name property' : 'room'}  does not exist.` });
      return;
    }

    if (this.game.players.length >= this.maxPlayer) {
      socket.emit('join:room:error', { message: 'Maximum number of players reached.' });
      return;
    }

    await socket.join(room);

    this.game.players.push({ id: socket.id, name, role: 'member', lifePoint: 3 });

    socket.emit('join:room:success', this.game.players);
  }
}
